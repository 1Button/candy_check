#!/usr/bin/env ruby

require 'bundler/setup'
require 'optparse'
require 'ostruct'
require 'pp'
require 'candy_check'

class InputParser
  attr_reader :config, :package, :product_id, :token

  def initialize
    @config = {
      application_name: 'CandyCheck',
      application_version: version,
      key_secret: 'notasecret'
    }
    configure!
  end

  def parse!(args)
    @parser.parse!(args)
    help! unless @package && @product_id && @token
  end

  private

  def configure!
    @parser = OptionParser.new do |opts|
      @opts = opts
      opts.banner = 'Usage cc_playstore [options]'
      opts.separator ''
      opts.separator 'Required options:'

      opts.on('-e', '--issuer ISSUER', 'your service account\'s email') do |v|
        config[:issuer] = v
      end
      opts.on('-k', '--key-file KEY_FILE', 'the key file to use') do |v|
        config[:key_file] = v
      end
      opts.on('-p', '--package NAME', 'your app\'s package name') do |v|
        @package = v
      end
      opts.on('-i', '--product-id ID', 'your product\'s id') do |v|
        @product_id = v
      end
      opts.on('-t', '--token TOKEN', 'your the purchase token') do |v|
        @token = v
      end
      opts.separator ''
      opts.separator 'Optional options:'
      opts.on('-s', '--secret SECRET', 'the secret to decrypt the key file, defaults to \'notasecret\'') do |v|
        config[:key_secret] = v
      end
      opts.on('-a', '--app-name NAME', 'your application\'s name, default to \'CandyCheck\'') do |v|
        config[:application_name] = v
      end
      opts.on('-r', '--app-version VERSION', "your application's version, default to '#{version}'") do |v|
        config[:application_version] = v
      end
      opts.separator ''
      opts.separator 'Further functions:'
      opts.on_tail('-v', '--version', 'Show version') do
        puts version
        exit
      end
      opts.on_tail('-h', '--help', 'Show help') do
        help!
      end
    end
  end

  def help!
    puts @opts
    exit
  end

  def version
    CandyCheck::VERSION
  end
end

class App
  attr_reader :input

  def initialize
    @input = InputParser.new
    load_config
    perform
  end

  private

  def load_config
    input.parse!(ARGV)
  end

  def perform
    puts "Package: #{input.package}"
    puts "Product: #{input.product_id}"
    puts "Token:   #{input.token}"
    puts
    config   = CandyCheck::PlayStore::Config.new(input.config)
    puts 'Configuration'
    pp config
    puts
    verifier = CandyCheck::PlayStore::Verifier.new(config)
    puts 'Booting'
    verifier.boot!
    puts '-> done'
    puts
    result = verifier.verify(input.package, input.product_id, input.token)
    puts
    puts "#{result.class}:"
    pp result
  end
end

App.new
