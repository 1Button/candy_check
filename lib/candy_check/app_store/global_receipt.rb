module CandyCheck
  module AppStore
    # Describes a successful response from the AppStore verification server
    class GlobalReceipt
      include Utils::AttributeReader

      # @return [Hash] the raw response returned from the server
      attr_reader :response

      # @return [Hash] the raw receipt attributes returned from the server
      attr_reader :attributes

      # @return [Array<Receipt>] the in_app receipts returned from the server
      attr_reader :in_app

      # Initializes a new instance which bases on a JSON result
      # from Apple's verification server
      # @param response [Hash]
      # @param product_ids [Hash]
      def initialize(response, product_ids=nil)
        @response   = response
        @attributes = response["receipt"]
        @in_app = attributes["in_app"].select do |info|
          product_ids.nil? || product_ids.include?(info["product_id"])
        end.map { |r| Receipt.new(r) }.sort do |a, b|
          a.purchase_date - b.purchase_date
        end
      end

      # The receipt's adam_id
      # @return [Integer]
      def adam_id
        read_integer("adam_id")
      end

      # The receipt's Generated by App Store Connect and used by the App Store to uniquely identify 
      # the app purchased. Apps are assigned this identifier only in production. Treat this value as a 64-bit long integer.
      # @return [Integer]
      def app_item_id
        read_integer("app_item_id")
      end

      # The receipt's bundle identifier for the app to which the receipt belongs.
      # You provide this string on App Store Connect. This corresponds to the value of CFBundleIdentifier in the Info.plist file of the app.
      # @return [String]
      def bundle_id
        read("bundle_id")
      end

      # The receipt's unique identifier for the app download transaction.
      # @return [Integer]
      def download_id
        read_integer("download_id")
      end

      # The time the receipt expires for apps purchased through the Volume Purchase Program,
      # in a date-time format similar to the ISO 8601.
      # @return [DateTime]
      def expiration_date
        read_datetime_from_string("expiration_date")
      end

      # The version of the app that the user originally purchased. This value does not change, 
      # and corresponds to the value of CFBundleVersion (in iOS) or CFBundleShortVersionString (in macOS)
      # in the Info.plist file of the original purchase. In the sandbox environment, the value is always "1.0".
      # @return [String]
      def original_application_version
        read("original_application_version")
      end

      # The original purchase date which might differ from the
      # actual purchase date for restored products
      # @return [DateTime]
      def original_purchase_date
        read_datetime_from_string("original_purchase_date")
      end

      # The time the user ordered the app available for pre-order
      # @return [DateTime]
      def preorder_date
        read_datetime_from_string("preorder_date")
      end

      # The time the App Store generated the receipt
      # @return [DateTime]
      def receipt_creation_date
        read_datetime_from_string("receipt_creation_date")
      end

      # The type of receipt generated. The value corresponds to the environment in which the app or VPP purchase was made.
      # Possible values: Production, ProductionVPP, ProductionSandbox, ProductionVPPSandbox
      # @return [String]
      def receipt_type
        read("receipt_type")
      end

      # The time the request to the verifyReceipt endpoint was processed and the response was generated
      # @return [DateTime]
      def request_date
        read_datetime_from_string("request_date")
      end

      # An arbitrary number that identifies a revision of your app. In the sandbox, this key's value is “0”.
      # @return [Integer]
      def version_external_identifier
        read_integer("version_external_identifier")
      end
    end
  end
end
